from __future__ import annotations

import pandas as pd
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from jinja2 import Environment, select_autoescape
from pydantic import BaseModel, Field, ValidationError
from typing import Literal
from heart_model import HeartAttackModel, FEATURES

# –∏–Ω–∏—Ü–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ 
model = HeartAttackModel()

#–ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ñ–∞—Ä–∫—Ç–∞) –≤ HTML –ø—Ä—è–º–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–¥–∞, –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
_render = lambda tpl, **ctx: Environment(loader=None, autoescape=select_autoescape(['html'])).from_string(tpl).render(**ctx)

# Pydantic‚Äë—Å—Ö–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –∑–∞–¥–∞–µ—Ç –∏—Ö —Ç–∏–ø—ã, –Ω–∞—Å–ª–µ–¥—É—é Basemodel
#–∑–∞–¥–∞–¥–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –≤–≤–æ–¥–∏–ª –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ 0 –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä
class Patient(BaseModel):
    age: int = Field(ge=0)
    cholesterol: float
    heart_rate: int = Field(ge=40, le=120, alias='heart rate')
    diabetes: Literal[0,1]
    smoking: Literal[0,1]
    obesity: Literal[0,1]
    alcohol_consumption: int = Field(ge=0, alias='alcohol consumption')
    exercise_hours_per_week: float = Field(ge=0, alias='exercise hours per week')
    stress_level: int = Field(ge=0, le=10, alias='stress level')
    sedentary_hours_per_day: float = Field(ge=0, alias='sedentary hours per day')
    bmi: float = Field(ge=10)
    physical_activity_days_per_week: int = Field(ge=0, alias='physical activity days per week')
    sleep_hours_per_day: float = Field(ge=0, alias='sleep hours per day')
    troponin: float = Field(ge=0)
    gender: Literal[0,1]
    systolic_blood_pressure: int = Field(ge=0, alias='systolic blood pressure')

    class Config:
        populate_by_name = True  




#–∏–Ω–∏—Ü–∞–ª–∏–∑–∞—Ü–∏—è fastapi
app = FastAPI(title='–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞', docs_url='/api/docs', redoc_url=None)

FIELDS = [
    ('–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)', 'age'),
    ('–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω (–º–º–æ–ª—å/–ª)', 'cholesterol'),
    ('–ß–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π (—É–¥/–º–∏–Ω)', 'heart_rate'),
    ('–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç (0/1)', 'diabetes'),
    ('–ö—É—Ä–µ–Ω–∏–µ (0/1)', 'smoking'),
    ('–û–∂–∏—Ä–µ–Ω–∏–µ (0/1)', 'obesity'),
    ('–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è (–ø–æ—Ä—Ü–∏–π/–Ω–µ–¥.)', 'alcohol_consumption'),
    ('–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—á/–Ω–µ–¥.)', 'exercise_hours_per_week'),
    ('–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ (1‚Äì10)', 'stress_level'),
    ('–°–∏–¥—è—á–∏–µ —á–∞—Å—ã –≤ –¥–µ–Ω—å', 'sedentary_hours_per_day'),
    ('–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞', 'bmi'),
    ('–î–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é', 'physical_activity_days_per_week'),
    ('–°–æ–Ω (—á/–¥–µ–Ω—å)', 'sleep_hours_per_day'),
    ('–¢—Ä–æ–ø–æ–Ω–∏–Ω (–Ω–≥/–º–ª)', 'troponin'),
    ('–ü–æ–ª (0 ‚Äì –∂–µ–Ω., 1 ‚Äì –º—É–∂.)', 'gender'),
    ('–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–º–º —Ä—Ç. —Å—Ç.)', 'systolic_blood_pressure'),
]

#–æ—Ç—Ä–∏—Å–æ–≤–∫–∞ frontenda, —Ç–æ –µ—Å—Ç—å html —Ñ–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ _render
HTML_PAGE = """<!DOCTYPE html><html lang='ru' class='h-full'>
<head><meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'>
<title>–†–∏—Å–∫ –∏–Ω—Ñ–∞—Ä–∫—Ç–∞</title><script src='https://cdn.tailwindcss.com'></script></head>
<body class='bg-gradient-to-br from-red-50 via-rose-50 to-indigo-50 min-h-full flex flex-col items-center py-10'>
<h1 class='text-3xl font-semibold mb-6'>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏–Ω—Ñ–∞—Ä–∫—Ç–∞</h1>
<form action='/web_predict' method='post' class='bg-white shadow-lg rounded-2xl p-8 w-full max-w-4xl grid grid-cols-1 sm:grid-cols-2 gap-6'>
{% for label, name in fields %}
  <div class='flex flex-col'>
    <label class='text-sm font-medium mb-1' for='{{ name }}'>{{ label }}</label>
    <input class='border rounded-lg px-3 py-2' name='{{ name }}' id='{{ name }}' required>
  </div>
{% endfor %}
  <div class='sm:col-span-2 text-center'>
    <button type='submit' class='bg-red-600 text-white px-6 py-3 rounded-xl hover:bg-red-700 transition'>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å</button>
  </div>
</form>
{% if error %}
  <p class='text-red-600 mt-4 font-medium'>{{ error }}</p>
{% endif %}
{% if level is not none %}
  <div class='mt-8 w-full max-w-xl text-center'>
    <div class='bg-white shadow-xl rounded-2xl p-6'>
      <h2 class='text-xl font-semibold mb-4'>–†–µ–∑—É–ª—å—Ç–∞—Ç</h2>
      <p class='text-lg'>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: <span class='font-bold {% if level == "high" %}text-red-600{% else %}text-green-600{% endif %}'>
        {{ '–í—ã—Å–æ–∫–∏–π' if level == 'high' else '–ù–∏–∑–∫–∏–π' }}</span>
        <span class='text-2xl ml-2'>{{ 'üü•' if level == 'high' else 'üü©' }}</span></p>
    </div>
  </div>
{% endif %}
</body></html>"""


#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ get-–∑–∞–ø—Ä–æ—Å–∞ –ø–æ –∞–¥—Ä–µ—Å—É –ø–æ –∫–æ—Ä–Ω–µ–æ–≤–º—É –∞–¥—Ä–µ—Å—É
@app.get('/', response_class=HTMLResponse, tags=["–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—É–ø–∞"])
async def index(): 
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
    return HTMLResponse(_render(HTML_PAGE, fields=FIELDS, level=None, error=None))

#–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç post-–∑–∞–ø—Ä–æ—Å —Å —Ñ–æ—Ä–º—ã /web_predict –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ http://127.0.0.1:8000
@app.post('/web_predict', response_class=HTMLResponse, tags=["–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—É–ø–∞"])
async def web_predict(request: Request):
    #–ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ HTML-—Ñ–æ—Ä–º—É –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è field_name - –∑–Ω–∞—á–µ–Ω–∏–µ
    form = await request.form()

    #–ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
    # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    data: dict[str, object] = {}
    for k, v in form.items():
        s = v.strip().replace(',', '.')  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –µ—Å–ª–∏ —á—Ç–æ
        try:
            num = float(s)  # –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
            data[k] = int(num) if num.is_integer() else num  # –µ—Å–ª–∏ —Ü–µ–ª–æ–µ ‚Äî –¥–µ–ª–∞–µ–º int
        except ValueError:
            data[k] = s  # –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–æ–π

    # –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é pydantic
    try:
        patient = Patient(**data)
    except ValidationError as exc:
        msg = exc.errors()[0].get('msg', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        return HTMLResponse(_render(HTML_PAGE, fields=FIELDS, level=None, error=msg), status_code=400)

    # –ø–æ–ª–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ –æ—à–∏–±–∫–æ–π
    X = pd.DataFrame([patient.model_dump(by_alias=True)])
    level = 'high' if model.predict(X)[0] else 'low'
    return HTMLResponse(_render(HTML_PAGE, fields=FIELDS, level=level, error=None))


#api–≤–µ—Ä—Å–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /api/predict —Å JSON-–¥–∞–Ω–Ω—ã–º–∏
@app.post('/api/predict', tags=["–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—É–ø–∞"])
async def api_predict(patient: Patient):
    X = pd.DataFrame([patient.model_dump(by_alias=True)])
    risk_high = model.predict(X)[0]
    return {'risk_level': 'high' if risk_high else 'low'}
